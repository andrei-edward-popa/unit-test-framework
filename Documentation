1. If you want to create tests for an application, the steps are the following:

- copy your source code into 'tcs/main.tcs' file
- execute 'make test' in root folder of the framework
- tests will be in 'tcs/tests.h' and all REQUIRES that can be done with this application will be in 'tcs/vpl_evaluate.cases'





2. Documentation for all functions that can be used in this framework is the following:

**************************************************************************************************************************************************************************
	@function	TEST							Create a test which need to be passed as REQUIRES parameter in test file (vpl_evaluate.cases).
	@param		suite_name						Name of the suite.
	@param		test_name						Name of the test.

	@note										Syntax for REQUIRES is the following: REQUIRES=suite_name::test_name

	@example									TEST(Existence, Car) {
													/* insert assertions here */
												}
**************************************************************************************************************************************************************************





**************************************************************************************************************************************************************************
	@function	ASSERT_EQUAL					Test if 2 parameters are equal.
				ASSERT_NOT_EQUAL				Test if 2 parameters are not equal.
				ASSERT_LESS						Test if first argument is less than the second argument.
				ASSERT_GREATER					Test if first argument is greater than the second argument.
				ASSERT_LESS_OR_EQUAL			Test if first argument is less than or equal with the second argument.
				ASSERT_GREATER_OR_EQUAL			Test if first argument is greater than or equal with the second argument.
	@param		first_argument					First argument of the comparison operation.
	@param		second_argument					Second argument of the comparison operation.
	@param		message							Message to be printed if assertion is false.

	@example									a = 5;
												b = 5;
												ASSERT_EQUAL(a, b, "a is not equal to b!");
**************************************************************************************************************************************************************************





**************************************************************************************************************************************************************************
	@function	REGISTER_CLASS					Register a class to be tested.
	@param		class_name						Name of the class to be tested.

	@note										This registration creates also a class named 'class_nameWrapper', which will store static methods
												for accesing any entity of the real class named class_name.

	@example									REGISTER_CLASS(Car) {
													/* register attributes/methods/contructors/destructors/operators for class Car */
												};
**************************************************************************************************************************************************************************





**************************************************************************************************************************************************************************
	@function	REGISTER_ATTRIBUTE				Register an attribute to be tested.
	@param		attribute_name					Name of the attribute to be tested.
	@param		attribute_type					Data type of the attribute.
	@param		attribute_template				Any valid identifier that is unique for any attributes in a class.

	@note										This registration creates a method in 'class_nameWrapper' called exactly like the
												attribute. This method takes a pointer to an object of type class_name and returns
												the value of the attribute of that object if the attribute exists. If the attribute
												doesn't exist, the method returns a std::string with the message 'Attribute attribute_name
												is not defined!'. Use 'auto' keyword to store the value of the attribute.

	@example									REGISTER_CLASS(Car) {
													REGISTER_ATTRIBUTE(color, std::string, color_unique_identifier);
													/* register another attributes/methods/contructors/destructors/operators for class Car */
												};
**************************************************************************************************************************************************************************





**************************************************************************************************************************************************************************
	@function	REGISTER_METHOD					Register a method to be tested.
	@param		method_name						Name of the method to be tested.
	@param		method_signature				Signature of the method.
	@param		method_template					Any valid identifier that is unique for any methods in a class.

	@note										This registration creates a method in 'class_nameWrapper' called exactly like the
												original method. This method takes a pointer to an object of type class_name and
												the other parameters of the original method and returns (if it is the case)
												if the method exists. If the method doesn't exist, the wrapper method returns
												a std::string with the message 'Method method_name is not defined!'. Use 'auto'
												keyword to store the return value of the method (if it is the case).
												
	@note										Method signature need to be specified in the following form:
												return_type(Class::*)(arg_type1, arg_type2, ...)
												The name 'Class' it is not the class name, it needs to be 'Class' for any signature.

	@example									REGISTER_CLASS(Car) {
													REGISTER_METHOD(setColor, void(Class::*)(std::string), setColor_unique_identifier);
													/* register another attributes/methods/contructors/destructors/operators for class Car */
												};
**************************************************************************************************************************************************************************





**************************************************************************************************************************************************************************
	@function	REGISTER_SAME_METHOD			Register a method to be tested.
	@param		method_name						Name of the method to be tested.
	@param		method_signature				Signature of the method.
	@param		method_template					Any valid identifier that is unique for any methods in a class.

	@note										This function needs to be used only if you define multiple methods with the same name, but
												with different signatures. For example, if you have 3 methods with the same name, but
												different signatures, the first one needs to be registered with REGISTER_METHOD and the others
												with REGISTER_SAME_METHOD. Also, the method_template needs to be different.

	@example									REGISTER_CLASS(Car) {
													REGISTER_METHOD(setColor, void(Class::*)(std::string), setColor_unique_identifier_1);
													REGISTER_SAME_METHOD(setColor, void(Class::*)(const char *), setColor_unique_identifier_2);
													/* register another attributes/methods/contructors/destructors/operators for class Car */
												};
**************************************************************************************************************************************************************************





**************************************************************************************************************************************************************************
	@function	REGISTER_OPERATOR				Register an operator to be tested.
	@param		operator_name					Name of the operator to be tested.
	@param		operator_identifier_name		Identifier name of the operator to be tested.
	@param		operator_signature				Signature of the operator.
	@param		operator_template				Any valid identifier that is unique for any operators in a class.

	@note										This registration creates a method in 'class_nameWrapper' called like
												operator_identifier_name attribute of the REGISTER_OPERATOR functiion.
												This method takes a pointer to an object of type class_name and
												the other parameters of the operator and returns (if it is the case)
												if the operator exists. If the operator doesn't exist, the wrapper method returns
												a std::string with the message 'Operator operator_name is not defined!'. Use 'auto'
												keyword to store the return value of the method (if it is the case).
												
	@note										Operator signature need to be specified in the following form:
												return_type(Class::*)(arg_type1, arg_type2, ...)
												The name 'Class' it is not the class name, it needs to be 'Class' for any signature.

	@note										Parameter operator_identifier_name needs to be the name of the operator, but like an
												identifier. For example, if operator_name is 'operator+', then operator_identifier_name
												needs to be 'operatorPlus'.

	@example									REGISTER_CLASS(Car) {
													REGISTER_OPERATOR(operator+, operatorPlus, Car(Class::*)(const Car &), operatorPlus_unique_identifier);
													/* register another attributes/methods/contructors/destructors/operators for class Car */
												};
**************************************************************************************************************************************************************************





**************************************************************************************************************************************************************************
	@function	REGISTER_SAME_OPERATOR			Register an operator to be tested.
	@param		operator_name					Name of the operator to be tested.
	@param		operator_identifier_name		Identifier name of the operator to be tested.
	@param		operator_signature				Signature of the operator.
	@param		operator_template				Any valid identifier that is unique for any operators in a class.

	@note										This function needs to be used only if you define multiple operators with the same name, but
												with different signatures. For example, if you have 3 operators with the same name, but
												different signatures, the first one needs to be registered with REGISTER_OPERATOR and the others
												with REGISTER_SAME_OPERATOR. Also, the operator_template needs to be different.

	@example									REGISTER_CLASS(Car) {
													REGISTER_OPERATOR(operator+, operatorPlus, Car(Class::*)(const Car &), operatorPlus_unique_identifier_1);
													REGISTER_SAME_OPERATOR(operator+, operatorPlus, Car(Class::*)(const int), operatorPlus_unique_identifier_2);
													/* register another attributes/methods/contructors/destructors/operators for class Car */
												};
**************************************************************************************************************************************************************************





**************************************************************************************************************************************************************************
	@function	REGISTER_CONTAINER				Register a container for testing its values.
	@param		container_name					Name of the container (vector, set, map, ...).
	@param		container_template				Container identifier template.
	@param		__VA_ARGS__						Container data type or, in case of an associative type array (map), you can use the
												following syntax: type1 COMMA type2. Use COMMA macro in this case.

	@example									REGISTER_CONTAINER(vector, Integer, int);
												TEST(Suite, Test) {
													std::vector<int> vec{1, 2, 3};
													std::vector<double> vec2{1.0, 2.0, 3.0};
													auto getIndex0 = vectorOfInteger(vec, 0);
													ASSERT_EQUAL(getIndex0, 1, "Assert failed message");
													auto getIndex10 = vectorOfInteger(vec, 10);
													ASSERT_EQUAL(getIndex10, "Index of out bound!", "Assert failed message");
													auto getIndex1 = vectorOfInteger(vec2, 1);
													ASSERT_EQUAL(getIndex1, "Container type is incorrect!", "Assert failed message");
												}
**************************************************************************************************************************************************************************





**************************************************************************************************************************************************************************
	@function	REGISTER_SEGMENTATION_FAULT		Register a message where segmentation fault is likely to happen.
	@param		test_case						Test case name speficied in CASE parameter in test file (vpl_evaluate.cases).
	@param		message							Message to be shown in case of a segmentation fault.

	@example									REGISTER_SEGMENTATION_FAULT("Special Test #1", "Segmentation fault can happen because...");
**************************************************************************************************************************************************************************





**************************************************************************************************************************************************************************
	@function	REGISTER_FUNCTION				Register a function to be tested.
	@param		return_type						Return type of the function to be tested.
	@param		function_name					Name of the function to be tested.
	@param		__VA_ARGS__						Argument types of the function to be tested, comma separated values.
	@param		function_template				Any valid identifier that is unique for any functions.
	
	@example									REGISTER_FUNCTION(double, do_sum, int, float, double, do_sum_unique_identifier);
**************************************************************************************************************************************************************************





**************************************************************************************************************************************************************************
	@function	ASSERT_FUNCTION					Checks if a function with given signature exists.
	@param		function_name					Name of the function to be tested.
	@param		function_template				Need to correspond with one of the function_template defined with REGISTER_FUNCTION.
	@param		message							Message to be printed if assertion is false.
	
	@example									REGISTER_FUNCTION(double, do_sum, int, float, double, do_sum_unique_identifier);
												TEST(Function, do_sum) {
													ASSERT_FUNCTION(do_sum, do_sum_unique_identifier, "Function 'do_sum' doesn't exist!") {
														auto value = do_sum(1, 1.0f, 1.0);
														ASSERT_EQUAL(value, 3.0, "Function 'do_sum' doesn't return the correct value!");
													}
												}
**************************************************************************************************************************************************************************





**************************************************************************************************************************************************************************
	@function	ASSERT_CLASS					Check if a class exists.
	@param		class_name						Name of the class to be tested.
	@param		message							Message to be printed if assertion is false.
	
	@example									REGISTER_CLASS(Car) {
													/* register another entities */
												};
												TEST(Existence, Car) {
													ASSERT_CLASS(Car, "Class 'Car' doesn't exist!");
												}
**************************************************************************************************************************************************************************




**************************************************************************************************************************************************************************
	@function	ASSERT_INHERITANCE				Check if a class is derived from another class.
	@param		base_class						Name of the base class to be tested.
	@param		derived_class					Name of the derived class to be tested.
	@param		message							Message to be printed if assertion is false.
	
	@example									REGISTER_CLASS(Vehicle) {
													/* register another entities */
												};
												REGISTER_CLASS(Car) {
													/* register another entities */
												};
												TEST(Inheritance, Vehicle_Car) {
													ASSERT_INHERITANCE(Vehicle, Car, "Class 'Vehicle' in not a base class of class 'Car'!");
												}
**************************************************************************************************************************************************************************




**************************************************************************************************************************************************************************
	@function	ASSERT_INHERITANCE_STL_BASE_CLASS	Check if a class is derived from a STL class.
	@param		base_class							Name of the STL base class to be tested.
	@param		derived_class						Name of the derived class to be tested.
	@param		message								Message to be printed if assertion is false.
	
	@example										REGISTER_CLASS(CarException) {
														/* register another entities */
													};
													TEST(Inheritance, Exception) {
														ASSERT_INHERITANCE_STL_BASE_CLASS(std::exception, CarException, "Class 'std::expcetion' in not a base class of class 'CarException'!");
													}
**************************************************************************************************************************************************************************




**************************************************************************************************************************************************************************
	@function	ASSERT_ABSTRACT					Check if a class is abstract.
	@param		class_name						Name of the class to be tested.
	@param		message							Message to be printed if assertion is false.
	
	@example									REGISTER_CLASS(Car) {
													/* register another entities */
												};
												TEST(Abstract, Car) {
													ASSERT_ABSTRACT(Car, "Class 'Car' is not abstract!");
												}
**************************************************************************************************************************************************************************





**************************************************************************************************************************************************************************
	@function	ASSERT_ATTRIBUTE				Check if an attribute with given type exists.
	@param		class_name						Name of the class.
	@param		attribute_name					Name of the attribute in class 'class_name' to be tested. 
	@param		attribute_template				Need to correspond with one of the attribute_template defined with REGISTER_ATTRIBUTE in class 'class_name'.
	@param		message							Message to be printed if assertion is false.
	
	@example									REGISTER_CLASS(Car) {
													REGISTER_ATTRIBUTE(color, std::string, color_unique_identifier);
													/* register another entities */
												};
												TEST(CarAttribute, color) {
													ASSERT_ATTRIBUTE(Car, color, color_unique_identifier, "Attribute 'color' from class 'Car' doesn't exist!");
												}
**************************************************************************************************************************************************************************





**************************************************************************************************************************************************************************
	@function	ASSERT_METHOD					Check if a method with given signature exists.
	@param		class_name						Name of the class.
	@param		method_name						Name of the method in class 'class_name' to be tested. 
	@param		method_template					Need to correspond with one of the method_template defined with REGISTER_METHOD in class 'class_name'.
	@param		message							Message to be printed if assertion is false.
	
	@example									REGISTER_CLASS(Car) {
													REGISTER_METHOD(setColor, void(Class::*)(std::string), setColor_unique_identifier);
													/* register another entities */
												};
												TEST(CarMethod, setColor) {
													ASSERT_METHOD(Car, setColor, setColor_unique_identifier, "Method 'set' from class 'Car' doesn't exist or signature is wrong!");
												}
**************************************************************************************************************************************************************************




**************************************************************************************************************************************************************************
	@function	ASSERT_OPERATOR					Check if an operator with given signature exists.
	@param		class_name						Name of the class.
	@param		operator_identifier_name		Identifier name of the operator in class 'class_name' to be tested. 
	@param		operator_template				Need to correspond with one of the operator_template defined with REGISTER_OPERATOR in class 'class_name'.
	@param		message							Message to be printed if assertion is false.
	
	@example									REGISTER_CLASS(Car) {
													REGISTER_OPERATOR(operator+, operatorPlus, Car(Class::*)(const Car &), operatorPlus_unique_identifier);
													/* register another entities */
												};
												TEST(CarOperator, operatorPlus) {
													ASSERT_OPERATOR(Car, operatorPlus, operatorPlus_unique_identifier, "Operator '+' from class 'Car' doesn't exist or signature is wrong!");
												}
**************************************************************************************************************************************************************************




**************************************************************************************************************************************************************************
	@function	ASSERT_DESTRUCTOR				Checks if a class non-trivial destructor exists.								  
	@param		message							Message to be printed if assertion is false.

	@example									REGISTER_CLASS(Car) {
													/* register another entities */
												};
												TEST(Destructor, Car) {
													ASSERT_Destructor(Car, "Class 'Car' doesn't have a destructor!");
												}									
**************************************************************************************************************************************************************************





**************************************************************************************************************************************************************************
	@function	ASSERT_CONSTRUCTOR				Check if a constructor with given parameter types exists.
	@param		class_name						Name of the class to be tested.
	@param		__VA_ARGS__						Parameter types in the constructor. If default constructor is tested, then no parameters needed.
												Comma separated values.
	@param		message							Message to be printed if assertion is false.

	@note										You can check the return value of methods, values or values of object attribute only if
												you can create an object, so a constructor must exist. All checks need to be done inside
												the ASSERT_CONSTRUCTOR function using class_nameWrapper static methods to access attibutes,
												methods or operators for given objects.

	@example									REGISTER_CLASS(Car) {
													REGISTER_ATTRIBUTE(brand, std::string, brand_unique_identifier);
													REGISTER_ATTRIBUTE(color, std::string, color_unique_identifier);
													REGISTER_METHOD(setColor, void(Class::*)(std::string), setColor_unique_identifier);
													REGISTER_METHOD(getColor, std::string(Class::*)(), getColor_unique_identifier);
													/* register another entities */
												};
												TEST(Constructor, 1Param_Car) {
													ASSERT_CONSTRUCTOR(Car, std::string, "1 param. constructor for class 'Car' doesn't exist or parameters types are incorrect!") {
														Car car("Audi");
														CarWrapper::setColor(&car, "blue");
														auto brand = CarWrapper::brand(&car);
														auto color = CarWrapper::color(&car);
														auto getColor = CarWrapper::getColor(&car);
														ASSERT_EQUAL(brand, "Audi", 'Message 1');
														ASSERT_EQUAL(color, "blue", 'Message 2');
														ASSERT_EQUAL(getColor, "blue", 'Message 3');
													}
												}
**************************************************************************************************************************************************************************	

